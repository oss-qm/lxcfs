From 5ed9d4e26cc5a4fdda381dcac631a214805ff6e2 Mon Sep 17 00:00:00 2001
From: Serge Hallyn <serge.hallyn@ubuntu.com>
Date: Fri, 1 Apr 2016 22:52:07 -0500
Subject: [PATCH 2/4] s390: print the virtualized #cpus in cpuinfo_read

Signed-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>
---
 bindings.c | 38 ++++++++++++++++++++++++++++++++++++--
 1 file changed, 36 insertions(+), 2 deletions(-)

diff --git a/bindings.c b/bindings.c
index f4aaf64..22b6490 100644
--- a/bindings.c
+++ b/bindings.c
@@ -3157,8 +3157,11 @@ static int proc_cpuinfo_read(char *buf, size_t size, off_t offset,
 			if (strstr(line, "IBM/S390") != NULL) {
 				is_s390x = true;
 				am_printing = true;
+				continue;
 			}
 		}
+		if (strncmp(line, "# processors:", 12) == 0)
+			continue;
 		if (is_processor_line(line)) {
 			am_printing = cpuline_in_cpuset(line, cpuset);
 			if (am_printing) {
@@ -3188,8 +3191,7 @@ static int proc_cpuinfo_read(char *buf, size_t size, off_t offset,
 			if (!p || !*p)
 				goto err;
 			p++;
-			l = snprintf(cache, cache_size, "processor %d:%s", curcpu,
-				    );
+			l = snprintf(cache, cache_size, "processor %d:%s", curcpu, p);
 			if (l < 0) {
 				perror("Error writing to cache");
 				rv = 0;
@@ -3224,6 +3226,38 @@ static int proc_cpuinfo_read(char *buf, size_t size, off_t offset,
 		}
 	}
 
+	if (is_s390x) {
+		char *origcache = d->buf;
+		size_t l;
+		do {
+			d->buf = malloc(d->buflen);
+		} while (!d->buf);
+		cache = d->buf;
+		cache_size = d->buflen;
+		total_len = 0;
+		l = snprintf(cache, cache_size, "vendor_id       : IBM/S390\n");
+		if (l < 0 || l >= cache_size) {
+			free(origcache);
+			goto err;
+		}
+		cache_size -= l;
+		cache += l;
+		total_len += l;
+		l = snprintf(cache, cache_size, "# processors    : %d\n", curcpu + 1);
+		if (l < 0 || l >= cache_size) {
+			free(origcache);
+			goto err;
+		}
+		cache_size -= l;
+		cache += l;
+		total_len += l;
+		l = snprintf(cache, cache_size, "%s", origcache);
+		free(origcache);
+		if (l < 0 || l >= cache_size)
+			goto err;
+		total_len += l;
+	}
+
 	d->cached = 1;
 	d->size = total_len;
 	if (total_len > size ) total_len = size;
-- 
2.7.4

